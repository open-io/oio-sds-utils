#!/usr/bin/env python
# Copyright (C) 2017 OpenIO SAS, as part of OpenIO SDS
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import re
import os
import os.path
import sqlite3
import subprocess
import argparse

try:  # `oio` > 4.2.0
    from oio.common.xattr import read_user_xattr
except ImportError:
    from oio.common.utils import read_user_xattr
from oio.common.constants import volume_xattr_keys

from oio.common import exceptions as exc
from oio.directory.client import DirectoryClient


EXTENSION = '-bak'
MANDATORY_FLAGS = [
    'schema_version',
    'sys.account',
    'sys.m2.ctime',
    'sys.m2.init',
    'sys.m2.objects',
    'sys.m2.usage',
    'sys.m2.version',
    'sys.name',
    'sys.ns',
    'sys.peers',
    'sys.type',
    'sys.user.name',
    'sys.user.type',
    'version:main.admin',
    'version:main.aliases',
    'version:main.chunks',
    'version:main.contents',
    'version:main.properties',
]
JOIN_REQS = [
    "SELECT COUNT(*) FROM chunks WHERE content NOT IN (SELECT DISTINCT id FROM contents)",
    "SELECT COUNT(*) FROM contents WHERE id NOT IN (SELECT DISTINCT content FROM chunks)",
    "SELECT COUNT(*) FROM aliases WHERE content NOT IN (SELECT DISTINCT id FROM contents)",
    "SELECT COUNT(*) FROM contents WHERE id NOT IN (SELECT DISTINCT content FROM aliases)",
]


def check_volume(volume_path):
    meta = read_user_xattr(volume_path)
    server_type = meta.get(volume_xattr_keys['type'])
    if server_type != 'meta2':
        raise exc.OioException('Invalid volume path')
    namespace = meta.get(volume_xattr_keys['namespace'])
    server_id = meta.get(volume_xattr_keys['id'])
    if namespace is None or server_id is None:
        raise exc.OioException('Invalid meta2 volume path')
    return namespace, server_id


class Auditor(object):
    def __init__(self, vol, ns, addr, repair=False, optimize=False):
        self.vol = str(vol)
        self.ns = str(ns)
        self.addr = str(addr)
        self.repair = bool(repair)
        self.optimize = bool(optimize)
        conf = {'namespace': ns}
        self.dir = DirectoryClient(conf)
        # JFS: we turn each sequence of digits into a '*'
        self.pattern = self.vol
        while True:
            p = re.sub('\\d+', '*', self.pattern, count=4)
            if p == self.pattern:
                break
            self.pattern = p

    def copy_from(self, path, peers):
        for peer in (x for x in peers if x != self.addr):
            host, port = peer.split(':')
            # Build a command that locate all the bases with a path that
            # has a common pattern with our local base.
            src = str(path).replace(self.vol, self.pattern)
            src = '$(find ' + src + ' | grep -v ' + path + ' | head -n 1)'
            action = ' '.join(('/bin/cat', src))

            # then we try to reach the first peer that is answering
            args = ['ssh',
                    '-o', 'StrictHostKeyChecking=no', '-n', '-A',
                    '-p', str(22), host, action]
            with open(path, 'w') as f:
                child = subprocess.Popen(args, close_fds=True, stdout=f)
                child.wait()
                print "#SSH", child.returncode, path, ' '.join(args)
                if child.returncode == 0:
                    return
        raise Exception("No save succeeded")

    def repair_container(self, path):
        bn = os.path.basename(path)
        cid, seq, srvtype = bn.split('.')
        seq = int(seq)

        # Locate the peers of the base
        links = self.dir.show(cid=cid)
        meta2 = set(x['host'] for x in links['srv']
                    if x['type'] == srvtype and x['seq'] == seq)
        if self.addr not in meta2:
            raise Exception("Orphan base")
        else:
            meta2.remove(self.addr)
            if len(meta2) <= 0:
                raise Exception("No peer located")

        # Repair sequence
        os.rename(path, path + EXTENSION)
        try:
            self.copy_from(path, meta2)
        except:
            os.rename(path + EXTENSION, path)
            raise

    def audit_container(self, path):
        errors = list()
        try:
            with sqlite3.connect(path) as conn:
                conn.execute("PRAGMA integrity_check").fetchone()
                for mandatory_flag in MANDATORY_FLAGS:
                    cursor = conn.execute("SELECT * FROM admin WHERE k=:flag",
                                          {"flag": mandatory_flag})
                    if cursor.fetchone() is None:
                        errors.append(
                            "Missing mandatory flag (%s)" % mandatory_flag)
                for join_req in JOIN_REQS:
                    cursor = conn.execute(join_req)
                    count = cursor.fetchone()[0]
                    if count:
                        errors.append(
                            "Orphan entries (%s => %d)" % (join_req, count))
        except sqlite3.DatabaseError as exc:
            errors.append(str(exc))

        if errors:
            print "#CORRUPTED", path, str(errors)
            if self.repair:
                try:
                    self.repair_container(path)
                    print "#REPAIRED", path
                except Exception as e:
                    print "#FAILED", path, str(e)
            return

        try:
            if self.optimize:
                conn.execute("VACUUM")
                conn.execute("PRAGMA optimize")
                print "#OPTIMIZED", path
            else:
                print "#OK", path
        except sqlite3.DatabaseError as exc:
            print "#CORRUPTED", path, str(e)


def audit_directory(path):
    srvns, srvaddr = check_volume(repo)
    print "#VOL", srvns, srvaddr, repo
    auditor = Auditor(repo, srvns, srvaddr,
                      repair=args.repair, optimize=args.optimize)
    for root, dirs, files in os.walk(repo):
        if 'tmp' in dirs:
            dirs.remove('tmp')
        for name in files:
            if name.endswith(EXTENSION):
                continue
            path = os.path.join(root, name)
            auditor.audit_container(path)


def audit_file(path, args):
    srvns, srvaddr = check_volume(args.repo)
    print "#VOL", srvns, srvaddr, repo
    auditor = Auditor(repo, srvns, srvaddr,
                      repair=args.repair, optimize=args.optimize)
    auditor.audit_container(path)


if __name__ == '__main__':

    descr = "Crawl the meta2 volumes and check the base are valid SQLite3" \
            " files."
    parser = argparse.ArgumentParser(description=descr)
    parser.add_argument('--repo', action='store',
                        help="When files are configured, explicit the "
                             "repository the files belong to.")
    parser.add_argument('--repair', action='store_true',
                        help="Repair the broken bases from their replicas")
    parser.add_argument('--optimize', action='store_true',
                        help="Optimize the valid SQLite bases")
    parser.add_argument('paths', metavar='PATH', type=str, nargs='+',
                        help='The path to a meta2 volume')
    args = parser.parse_args()

    for repo in args.paths:
        if os.path.isdir(repo):
            audit_directory(repo)
        elif os.path.isfile(repo):
            audit_file(repo, args)
        else:
            print "#WTF", repo
